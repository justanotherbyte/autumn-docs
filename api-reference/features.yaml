openapi: 3.0.0
info:
  title: Entity API
  version: 1.0.0
servers:
  - url: https://api.useautumn.com/v1
security:
  - bearerAuth: []
paths:
  /customers/{customer_id}/entities:
    post:
      summary: Create a new entity
      operationId: createEntity
      security:
        - bearerAuth: []
      parameters:
        - name: customer_id
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateEntityRequest"
      responses:
        "201":
          description: ""
      x-code-samples:
        - lang: typescript
          label: single entity
          source: |
            import { Autumn as autumn } from 'autumn-js';

            const entity = await autumn.entities.create('user_123', {
              feature_id: 'seats',
              id: 'seat_456',
              name: 'Brandon Yeo'
            });

        - lang: typescript
          label: multiple entities
          source: |
            import { Autumn as autumn } from 'autumn-js';

            const entities = await autumn.entities.create('user_123',
            [
              {
                feature_id: 'seats',
                id: 'seat_456',
                name: 'Brandon Yeo'
              },
              {
                feature_id: 'seats',
                id: 'seat_789',
                name: 'John Yeo'
              }
            ]);

        - lang: curl
          label: single entity
          source: |
            curl -X POST 'https://api.useautumn.com/v1/customers/user_123/entities' \
            -H 'Authorization: Bearer am_sk_1234567890' \
            -H 'Content-Type: application/json' \
            -d '{
              "feature_id": "seats",
              "id": "seat_456",
              "name": "Brandon Yeo"
            }'

        - lang: curl
          label: multiple entities
          source: |
            curl -X POST 'https://api.useautumn.com/v1/customers/user_123/entities' \
            -H 'Authorization: Bearer am_sk_1234567890' \
            -H 'Content-Type: application/json' \
            -d '[
              {
                "feature_id": "seats",
                "id": "seat_456",
                "name": "Brandon Yeo"
              },
              {
                "feature_id": "seats",
                "id": "seat_789",
                "name": "John Yeo"
            }]'

        - lang: python
          label: single entity
          source: |
            import asyncio
            from autumn import Autumn

            autumn = Autumn('am_sk_1234567890')

            async def main():
                entity = await autumn.features.create_entity(
                    customer_id='user_123',
                    feature_id='seats',
                    id='seat_456',
                    name='Brandon Yeo'
                )

            asyncio.run(main())

  /customers/{customer_id}/entities/{entity_id}:
    delete:
      summary: Delete an entity
      operationId: deleteEntity
      security:
        - bearerAuth: []
      parameters:
        - name: customer_id
          in: path
          required: true
          schema:
            type: string
          description: Your unique identifier for the customer
        - name: entity_id
          in: path
          required: true
          schema:
            type: string
          description: Your unique identifier of the entity (eg, a seat ID)
      responses:
        "200":
          description: ""

  /usage:
    post:
      summary: Record usage for a feature
      operationId: recordUsage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RecordUsageRequest"
      responses:
        "200":
          description: ""
      x-code-samples:
        - lang: typescript
          source: |
            import { Autumn as autumn } from 'autumn-js';

            await autumn.usage({
              customer_id: 'user_123',
              feature_id: 'seats',
              value: 10
            });

        - lang: curl
          source: |
            curl -X POST 'https://api.useautumn.com/v1/usage' \
            -H 'Authorization: Bearer am_sk_1234567890' \
            -H 'Content-Type: application/json' \
            -d '{
              "customer_id": "user_123", 
              "feature_id": "seats",
              "quantity": 1
            }'

        - lang: python
          source: |
            import asyncio
            from autumn import Autumn

            autumn = Autumn('am_sk_1234567890')

            async def main():
                await autumn.features.set_usage(
                    customer_id='user_123',
                    feature_id='seats',
                    value=10,
                )

            asyncio.run(main())

  /customers/{customer_id}/balances:
    post:
      summary: Set balances for features
      operationId: setBalances
      security:
        - bearerAuth: []
      parameters:
        - name: customer_id
          in: path
          required: true
          schema:
            type: string
          description: Your unique identifier for the customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetBalancesRequest"
      responses:
        "200":
          description: ""
      x-code-samples:
        - lang: curl
          source: |
            curl -X POST 'https://api.useautumn.com/v1/customers/user_123/balances' \
            -H 'Authorization: Bearer am_sk_1234567890' \
            -H 'Content-Type: application/json' \
            -d '{
              "balances": [
                {
                  "feature_id": "chat_messages",
                  "balance": 10
                },
                {
                  "feature_id": "seats",
                  "balance": 15
                }
              ]
            }'

        - lang: python
          source: |
            import asyncio
            from autumn import Autumn, Balance

            autumn = Autumn('am_sk_1234567890')

            async def main():
                balances = await autumn.features.set_balances(
                    customer_id='user_123',
                    balances=[
                        Balance(
                            feature_id='chat_messages',
                            balance=10
                        ),
                        Balance(
                            feature_id='seats',
                            balance=15
                        )
                    ]
                )

            asyncio.run(main())

components:
  schemas:
    CreateEntityRequest:
      type: array
      items:
        type: object
        required:
          - id
          - feature_id
          - name
        properties:
          id:
            type: string
            description: Your unique identifier for the entity (eg, a seat ID)
          feature_id:
            type: string
            description: The feature ID associated with this entity (eg, seats). When an entity is created, a usage event will be recorded for this feature.
          name:
            type: string
            description: A name or identifier for the entity (e.g., an email address)

    Entity:
      type: object
      properties:
        id:
          type: string
        feature_id:
          type: string
        name:
          type: string
        created_at:
          type: integer
          format: int64

    RecordUsageRequest:
      type: object
      required:
        - feature_id
        - customer_id
        - value
      properties:
        feature_id:
          type: string
          description: The feature ID to set usage for
        customer_id:
          type: string
          description: Your unique identifier for the customer
        value:
          type: number
          description: The usage value to set

    SetBalancesRequest:
      type: object
      required:
        - balances
      properties:
        balances:
          type: array
          items:
            type: object
            required:
              - feature_id
              - balance
            properties:
              feature_id:
                type: string
                description: The identifier of the feature
              balance:
                type: number
                description: The balance value to set for the feature

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
